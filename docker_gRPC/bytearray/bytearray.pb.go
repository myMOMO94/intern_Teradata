// Code generated by protoc-gen-go. DO NOT EDIT.
// source: docker_gRPC/bytearray.proto

package bytearray

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ByteRequest struct {
	Request              []byte   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByteRequest) Reset()         { *m = ByteRequest{} }
func (m *ByteRequest) String() string { return proto.CompactTextString(m) }
func (*ByteRequest) ProtoMessage()    {}
func (*ByteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b0d3b8d1a4bf036, []int{0}
}

func (m *ByteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByteRequest.Unmarshal(m, b)
}
func (m *ByteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByteRequest.Marshal(b, m, deterministic)
}
func (m *ByteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteRequest.Merge(m, src)
}
func (m *ByteRequest) XXX_Size() int {
	return xxx_messageInfo_ByteRequest.Size(m)
}
func (m *ByteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ByteRequest proto.InternalMessageInfo

func (m *ByteRequest) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

type ByteReply struct {
	Reply                []byte   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByteReply) Reset()         { *m = ByteReply{} }
func (m *ByteReply) String() string { return proto.CompactTextString(m) }
func (*ByteReply) ProtoMessage()    {}
func (*ByteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b0d3b8d1a4bf036, []int{1}
}

func (m *ByteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ByteReply.Unmarshal(m, b)
}
func (m *ByteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ByteReply.Marshal(b, m, deterministic)
}
func (m *ByteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteReply.Merge(m, src)
}
func (m *ByteReply) XXX_Size() int {
	return xxx_messageInfo_ByteReply.Size(m)
}
func (m *ByteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteReply.DiscardUnknown(m)
}

var xxx_messageInfo_ByteReply proto.InternalMessageInfo

func (m *ByteReply) GetReply() []byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

func init() {
	proto.RegisterType((*ByteRequest)(nil), "bytearray.byteRequest")
	proto.RegisterType((*ByteReply)(nil), "bytearray.byteReply")
}

func init() { proto.RegisterFile("docker_gRPC/bytearray.proto", fileDescriptor_4b0d3b8d1a4bf036) }

var fileDescriptor_4b0d3b8d1a4bf036 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xc9, 0x4f, 0xce,
	0x4e, 0x2d, 0x8a, 0x4f, 0x0f, 0x0a, 0x70, 0xd6, 0x4f, 0xaa, 0x2c, 0x49, 0x4d, 0x2c, 0x2a, 0x4a,
	0xac, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28, 0xa9, 0x73, 0x71, 0x83,
	0x38, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x12, 0x5c, 0xec, 0x45, 0x10, 0xa6, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x8c, 0xab, 0xa4, 0xc8, 0xc5, 0x09, 0x51, 0x58, 0x90, 0x53,
	0x29, 0x24, 0xc2, 0xc5, 0x5a, 0x04, 0x62, 0x40, 0x15, 0x41, 0x38, 0x46, 0x5e, 0x5c, 0x9c, 0x4e,
	0x95, 0x25, 0xa9, 0x8e, 0x20, 0x83, 0x85, 0x6c, 0xb9, 0xb8, 0x83, 0x53, 0xf3, 0x52, 0x60, 0x06,
	0x8b, 0xe9, 0x21, 0x1c, 0x81, 0x64, 0xa1, 0x94, 0x08, 0x86, 0x78, 0x41, 0x4e, 0xa5, 0x12, 0x43,
	0x12, 0x1b, 0xd8, 0xa5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xcc, 0xa8, 0x41, 0xc8,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ByteArrayClient is the client API for ByteArray service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ByteArrayClient interface {
	SendRequest(ctx context.Context, in *ByteRequest, opts ...grpc.CallOption) (*ByteReply, error)
}

type byteArrayClient struct {
	cc *grpc.ClientConn
}

func NewByteArrayClient(cc *grpc.ClientConn) ByteArrayClient {
	return &byteArrayClient{cc}
}

func (c *byteArrayClient) SendRequest(ctx context.Context, in *ByteRequest, opts ...grpc.CallOption) (*ByteReply, error) {
	out := new(ByteReply)
	err := c.cc.Invoke(ctx, "/bytearray.ByteArray/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ByteArrayServer is the server API for ByteArray service.
type ByteArrayServer interface {
	SendRequest(context.Context, *ByteRequest) (*ByteReply, error)
}

// UnimplementedByteArrayServer can be embedded to have forward compatible implementations.
type UnimplementedByteArrayServer struct {
}

func (*UnimplementedByteArrayServer) SendRequest(ctx context.Context, req *ByteRequest) (*ByteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}

func RegisterByteArrayServer(s *grpc.Server, srv ByteArrayServer) {
	s.RegisterService(&_ByteArray_serviceDesc, srv)
}

func _ByteArray_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByteArrayServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bytearray.ByteArray/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByteArrayServer).SendRequest(ctx, req.(*ByteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ByteArray_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bytearray.ByteArray",
	HandlerType: (*ByteArrayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequest",
			Handler:    _ByteArray_SendRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docker_gRPC/bytearray.proto",
}
